<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="exportToExcel.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        PIscAAAAAElFTkSuQmCC
</value>
  </data>
</root>